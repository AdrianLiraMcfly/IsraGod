"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const { rules } = require('@adonisjs/validator');
class CreateUserValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            username: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(15),
                rules.minLength(3),
                rules.unique({ table: 'users', column: 'username' }),
            ]),
            email: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(255),
                rules.email(),
                rules.unique({ table: 'users', column: 'email' }),
            ]),
            password: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(180),
                rules.minLength(6),
            ]),
            confirmation_password: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(180),
                rules.minLength(6),
                rules.confirmed('password'),
            ]),
        });
        this.messages = {
            'username.required': 'Nombre de usuario es requerido',
            'username.maxLength': 'Nombre de usuario es muy largo',
            'username.minLength': 'Nombre de usuario es muy corto',
            'username.unique': 'Nombre de usuario ya existe',
            'email.required': 'Email es requerido',
            'email.maxLength': 'Email es muy largo',
            'email.email': 'Email no es valido',
            'email.unique': 'Email ya existe',
            'password.required': 'Password es requerido',
            'password.maxLength': 'Password es muy largo',
            'password.minLength': 'Password es muy corto',
        };
    }
}
exports.default = CreateUserValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlVXNlclZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNyZWF0ZVVzZXJWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyRUFBbUU7QUFFbkUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ2hELE1BQXFCLG1CQUFtQjtJQUN0QyxZQUFzQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQUd2QyxXQUFNLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDNUIsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUN0QyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztnQkFDbkIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQzthQUNyRCxDQUFDO1lBRUYsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNuQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztnQkFDcEIsS0FBSyxDQUFDLEtBQUssRUFBRTtnQkFDYixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUM7YUFDbEQsQ0FBQztZQUNGLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDdEMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ25CLENBQUM7WUFDRixxQkFBcUIsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQzthQUM1QixDQUFDO1NBQ0gsQ0FBQyxDQUFBO1FBRUssYUFBUSxHQUFtQjtZQUNoQyxtQkFBbUIsRUFBRSxnQ0FBZ0M7WUFDckQsb0JBQW9CLEVBQUUsZ0NBQWdDO1lBQ3RELG9CQUFvQixFQUFFLGdDQUFnQztZQUN0RCxpQkFBaUIsRUFBRSw2QkFBNkI7WUFDaEQsZ0JBQWdCLEVBQUUsb0JBQW9CO1lBQ3RDLGlCQUFpQixFQUFFLG9CQUFvQjtZQUN2QyxhQUFhLEVBQUUsb0JBQW9CO1lBQ25DLGNBQWMsRUFBRSxpQkFBaUI7WUFDakMsbUJBQW1CLEVBQUUsdUJBQXVCO1lBQzVDLG9CQUFvQixFQUFFLHVCQUF1QjtZQUM3QyxvQkFBb0IsRUFBRSx1QkFBdUI7U0FDOUMsQ0FBQTtJQXJDRCxDQUFDO0NBc0NGO0FBeENELHNDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjaGVtYSwgQ3VzdG9tTWVzc2FnZXMgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1ZhbGlkYXRvcidcbmltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuY29uc3QgeyBydWxlcyB9ID0gcmVxdWlyZSgnQGFkb25pc2pzL3ZhbGlkYXRvcicpXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDcmVhdGVVc2VyVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGN0eDogSHR0cENvbnRleHRDb250cmFjdCkge1xuICB9XG5cbiAgcHVibGljIHNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgIHVzZXJuYW1lOiBzY2hlbWEuc3RyaW5nKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICBydWxlcy5tYXhMZW5ndGgoMTUpLFxuICAgICAgcnVsZXMubWluTGVuZ3RoKDMpLFxuICAgICAgcnVsZXMudW5pcXVlKHsgdGFibGU6ICd1c2VycycsIGNvbHVtbjogJ3VzZXJuYW1lJyB9KSxcbiAgICBdKSxcbiAgXG4gICAgZW1haWw6IHNjaGVtYS5zdHJpbmcoeyB0cmltOiB0cnVlIH0sIFtcbiAgICAgIHJ1bGVzLm1heExlbmd0aCgyNTUpLFxuICAgICAgcnVsZXMuZW1haWwoKSxcbiAgICAgIHJ1bGVzLnVuaXF1ZSh7IHRhYmxlOiAndXNlcnMnLCBjb2x1bW46ICdlbWFpbCcgfSksXG4gICAgXSksXG4gICAgcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcoeyB0cmltOiB0cnVlIH0sIFtcbiAgICAgIHJ1bGVzLm1heExlbmd0aCgxODApLFxuICAgICAgcnVsZXMubWluTGVuZ3RoKDYpLFxuICAgIF0pLFxuICAgIGNvbmZpcm1hdGlvbl9wYXNzd29yZDogc2NoZW1hLnN0cmluZyh7IHRyaW06IHRydWUgfSwgW1xuICAgICAgcnVsZXMubWF4TGVuZ3RoKDE4MCksXG4gICAgICBydWxlcy5taW5MZW5ndGgoNiksXG4gICAgICBydWxlcy5jb25maXJtZWQoJ3Bhc3N3b3JkJyksXG4gICAgXSksXG4gIH0pXG5cbiAgcHVibGljIG1lc3NhZ2VzOiBDdXN0b21NZXNzYWdlcyA9IHtcbiAgICAndXNlcm5hbWUucmVxdWlyZWQnOiAnTm9tYnJlIGRlIHVzdWFyaW8gZXMgcmVxdWVyaWRvJyxcbiAgICAndXNlcm5hbWUubWF4TGVuZ3RoJzogJ05vbWJyZSBkZSB1c3VhcmlvIGVzIG11eSBsYXJnbycsXG4gICAgJ3VzZXJuYW1lLm1pbkxlbmd0aCc6ICdOb21icmUgZGUgdXN1YXJpbyBlcyBtdXkgY29ydG8nLFxuICAgICd1c2VybmFtZS51bmlxdWUnOiAnTm9tYnJlIGRlIHVzdWFyaW8geWEgZXhpc3RlJyxcbiAgICAnZW1haWwucmVxdWlyZWQnOiAnRW1haWwgZXMgcmVxdWVyaWRvJyxcbiAgICAnZW1haWwubWF4TGVuZ3RoJzogJ0VtYWlsIGVzIG11eSBsYXJnbycsXG4gICAgJ2VtYWlsLmVtYWlsJzogJ0VtYWlsIG5vIGVzIHZhbGlkbycsXG4gICAgJ2VtYWlsLnVuaXF1ZSc6ICdFbWFpbCB5YSBleGlzdGUnLFxuICAgICdwYXNzd29yZC5yZXF1aXJlZCc6ICdQYXNzd29yZCBlcyByZXF1ZXJpZG8nLFxuICAgICdwYXNzd29yZC5tYXhMZW5ndGgnOiAnUGFzc3dvcmQgZXMgbXV5IGxhcmdvJyxcbiAgICAncGFzc3dvcmQubWluTGVuZ3RoJzogJ1Bhc3N3b3JkIGVzIG11eSBjb3J0bycsXG4gIH1cbn1cbiJdfQ==