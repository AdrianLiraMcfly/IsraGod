"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const { rules } = require('@adonisjs/validator');
class CreateUserValidator {
    constructor(ctx) {
        this.ctx = ctx;
        this.schema = Validator_1.schema.create({
            username: Validator_1.schema.string({ trim: true }, [
                rules.minLength(3),
                rules.unique({ table: 'users', column: 'username' }),
            ]),
            email: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(255),
                rules.email(),
                rules.unique({ table: 'users', column: 'email' }),
            ]),
            password: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(180),
                rules.minLength(6),
            ]),
            confirmation_password: Validator_1.schema.string({ trim: true }, [
                rules.maxLength(180),
                rules.minLength(6),
                rules.confirmed('password'),
            ]),
        });
        this.messages = {
            'username.required': 'Nombre de usuario es requerido',
            'username.maxLength': 'Nombre de usuario es muy largo',
            'username.minLength': 'Nombre de usuario es muy corto',
            'username.unique': 'Nombre de usuario ya existe',
            'email.required': 'Email es requerido',
            'email.maxLength': 'Email es muy largo',
            'email.email': 'Email no es valido',
            'email.unique': 'Email ya existe',
            'password.required': 'Password es requerido',
            'password.maxLength': 'Password es muy largo',
            'password.minLength': 'Password es muy corto',
        };
    }
}
exports.default = CreateUserValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRlVXNlclZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNyZWF0ZVVzZXJWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyRUFBbUU7QUFFbkUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ2hELE1BQXFCLG1CQUFtQjtJQUN0QyxZQUFzQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQUd2QyxXQUFNLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDNUIsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUN0QyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDO2FBQ3JELENBQUM7WUFFRixLQUFLLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7Z0JBQ25DLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2dCQUNwQixLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNiLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQzthQUNsRCxDQUFDO1lBQ0YsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUN0QyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztnQkFDcEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDbkIsQ0FBQztZQUNGLHFCQUFxQixFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNuRCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztnQkFDcEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO2FBQzVCLENBQUM7U0FDSCxDQUFDLENBQUE7UUFFSyxhQUFRLEdBQW1CO1lBQ2hDLG1CQUFtQixFQUFFLGdDQUFnQztZQUNyRCxvQkFBb0IsRUFBRSxnQ0FBZ0M7WUFDdEQsb0JBQW9CLEVBQUUsZ0NBQWdDO1lBQ3RELGlCQUFpQixFQUFFLDZCQUE2QjtZQUNoRCxnQkFBZ0IsRUFBRSxvQkFBb0I7WUFDdEMsaUJBQWlCLEVBQUUsb0JBQW9CO1lBQ3ZDLGFBQWEsRUFBRSxvQkFBb0I7WUFDbkMsY0FBYyxFQUFFLGlCQUFpQjtZQUNqQyxtQkFBbUIsRUFBRSx1QkFBdUI7WUFDNUMsb0JBQW9CLEVBQUUsdUJBQXVCO1lBQzdDLG9CQUFvQixFQUFFLHVCQUF1QjtTQUM5QyxDQUFBO0lBcENELENBQUM7Q0FxQ0Y7QUF2Q0Qsc0NBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NoZW1hLCBDdXN0b21NZXNzYWdlcyB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvVmFsaWRhdG9yJ1xuaW1wb3J0IHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5jb25zdCB7IHJ1bGVzIH0gPSByZXF1aXJlKCdAYWRvbmlzanMvdmFsaWRhdG9yJylcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWF0ZVVzZXJWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY3R4OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gIH1cblxuICBwdWJsaWMgc2NoZW1hID0gc2NoZW1hLmNyZWF0ZSh7XG4gICAgdXNlcm5hbWU6IHNjaGVtYS5zdHJpbmcoeyB0cmltOiB0cnVlIH0sIFtcbiAgICAgIHJ1bGVzLm1pbkxlbmd0aCgzKSxcbiAgICAgIHJ1bGVzLnVuaXF1ZSh7IHRhYmxlOiAndXNlcnMnLCBjb2x1bW46ICd1c2VybmFtZScgfSksXG4gICAgXSksXG4gIFxuICAgIGVtYWlsOiBzY2hlbWEuc3RyaW5nKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICBydWxlcy5tYXhMZW5ndGgoMjU1KSxcbiAgICAgIHJ1bGVzLmVtYWlsKCksXG4gICAgICBydWxlcy51bmlxdWUoeyB0YWJsZTogJ3VzZXJzJywgY29sdW1uOiAnZW1haWwnIH0pLFxuICAgIF0pLFxuICAgIHBhc3N3b3JkOiBzY2hlbWEuc3RyaW5nKHsgdHJpbTogdHJ1ZSB9LCBbXG4gICAgICBydWxlcy5tYXhMZW5ndGgoMTgwKSxcbiAgICAgIHJ1bGVzLm1pbkxlbmd0aCg2KSxcbiAgICBdKSxcbiAgICBjb25maXJtYXRpb25fcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcoeyB0cmltOiB0cnVlIH0sIFtcbiAgICAgIHJ1bGVzLm1heExlbmd0aCgxODApLFxuICAgICAgcnVsZXMubWluTGVuZ3RoKDYpLFxuICAgICAgcnVsZXMuY29uZmlybWVkKCdwYXNzd29yZCcpLFxuICAgIF0pLFxuICB9KVxuXG4gIHB1YmxpYyBtZXNzYWdlczogQ3VzdG9tTWVzc2FnZXMgPSB7XG4gICAgJ3VzZXJuYW1lLnJlcXVpcmVkJzogJ05vbWJyZSBkZSB1c3VhcmlvIGVzIHJlcXVlcmlkbycsXG4gICAgJ3VzZXJuYW1lLm1heExlbmd0aCc6ICdOb21icmUgZGUgdXN1YXJpbyBlcyBtdXkgbGFyZ28nLFxuICAgICd1c2VybmFtZS5taW5MZW5ndGgnOiAnTm9tYnJlIGRlIHVzdWFyaW8gZXMgbXV5IGNvcnRvJyxcbiAgICAndXNlcm5hbWUudW5pcXVlJzogJ05vbWJyZSBkZSB1c3VhcmlvIHlhIGV4aXN0ZScsXG4gICAgJ2VtYWlsLnJlcXVpcmVkJzogJ0VtYWlsIGVzIHJlcXVlcmlkbycsXG4gICAgJ2VtYWlsLm1heExlbmd0aCc6ICdFbWFpbCBlcyBtdXkgbGFyZ28nLFxuICAgICdlbWFpbC5lbWFpbCc6ICdFbWFpbCBubyBlcyB2YWxpZG8nLFxuICAgICdlbWFpbC51bmlxdWUnOiAnRW1haWwgeWEgZXhpc3RlJyxcbiAgICAncGFzc3dvcmQucmVxdWlyZWQnOiAnUGFzc3dvcmQgZXMgcmVxdWVyaWRvJyxcbiAgICAncGFzc3dvcmQubWF4TGVuZ3RoJzogJ1Bhc3N3b3JkIGVzIG11eSBsYXJnbycsXG4gICAgJ3Bhc3N3b3JkLm1pbkxlbmd0aCc6ICdQYXNzd29yZCBlcyBtdXkgY29ydG8nLFxuICB9XG59XG4iXX0=