"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Comment_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Comment"));
const Post_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Post"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class CommentsController {
    async index({ response }) {
        const comments = await Comment_1.default.query().preload('user').preload('post');
        return response.status(200).json(comments);
    }
    async getComment(ctx) {
        const comment = await Comment_1.default.findOrFail(ctx.params.id);
        return comment;
    }
    async store({ request, response }) {
        const user = await User_1.default.findOrFail(request.param('user_id'));
        const post = await Post_1.default.findOrFail(request.param('post_id'));
        const comment = await Comment_1.default.create(request.all());
        await comment.related('user').associate(user);
        await comment.related('post').associate(post);
        return response.status(201).json(comment);
    }
    async update({ request, response }) {
        const comment = await Comment_1.default.findOrFail(request.param('id'));
        comment.merge(request.all());
        await comment.save();
        return response.status(200).json(comment);
    }
    async destroy({ request, response }) {
        const comment = await Comment_1.default.findOrFail(request.param('id'));
        await comment.delete();
        return response.status(204);
    }
}
exports.default = CommentsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWVudHNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ29tbWVudHNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUZBQXdDO0FBQ3hDLGlGQUFrQztBQUNsQyxpRkFBa0M7QUFDbEMsTUFBcUIsa0JBQWtCO0lBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQXNCO1FBQzlDLE1BQU0sUUFBUSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3RFLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUNVLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBd0I7UUFDNUMsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBc0I7UUFDdkQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUM1RCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQzVELE1BQU0sT0FBTyxHQUFHLE1BQU0saUJBQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDbkQsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM3QyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzdDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFzQjtRQUN4RCxNQUFNLE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUM3RCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQzVCLE1BQU0sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3BCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUNNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFzQjtRQUN6RCxNQUFNLE9BQU8sR0FBRyxNQUFNLGlCQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUM3RCxNQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUN0QixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0IsQ0FBQztDQUNKO0FBNUJMLHFDQTRCSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXHJcbmltcG9ydCBDb21tZW50IGZyb20gJ0FwcC9Nb2RlbHMvQ29tbWVudCdcclxuaW1wb3J0IFBvc3QgZnJvbSAnQXBwL01vZGVscy9Qb3N0J1xyXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1lbnRzQ29udHJvbGxlciB7XHJcbiAgICBwdWJsaWMgYXN5bmMgaW5kZXgoe3Jlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgIGNvbnN0IGNvbW1lbnRzID0gYXdhaXQgQ29tbWVudC5xdWVyeSgpLnByZWxvYWQoJ3VzZXInKS5wcmVsb2FkKCdwb3N0JylcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbihjb21tZW50cylcclxuICAgIH1cclxuICAgICAgICBwdWJsaWMgYXN5bmMgZ2V0Q29tbWVudChjdHg6IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IGF3YWl0IENvbW1lbnQuZmluZE9yRmFpbChjdHgucGFyYW1zLmlkKVxyXG4gICAgICAgICAgICByZXR1cm4gY29tbWVudFxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgYXN5bmMgc3RvcmUoe3JlcXVlc3QsIHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKHJlcXVlc3QucGFyYW0oJ3VzZXJfaWQnKSlcclxuICAgICAgICAgICAgY29uc3QgcG9zdCA9IGF3YWl0IFBvc3QuZmluZE9yRmFpbChyZXF1ZXN0LnBhcmFtKCdwb3N0X2lkJykpXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSBhd2FpdCBDb21tZW50LmNyZWF0ZShyZXF1ZXN0LmFsbCgpKVxyXG4gICAgICAgICAgICBhd2FpdCBjb21tZW50LnJlbGF0ZWQoJ3VzZXInKS5hc3NvY2lhdGUodXNlcilcclxuICAgICAgICAgICAgYXdhaXQgY29tbWVudC5yZWxhdGVkKCdwb3N0JykuYXNzb2NpYXRlKHBvc3QpXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAxKS5qc29uKGNvbW1lbnQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBhc3luYyB1cGRhdGUoe3JlcXVlc3QsIHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21tZW50ID0gYXdhaXQgQ29tbWVudC5maW5kT3JGYWlsKHJlcXVlc3QucGFyYW0oJ2lkJykpXHJcbiAgICAgICAgICAgIGNvbW1lbnQubWVyZ2UocmVxdWVzdC5hbGwoKSlcclxuICAgICAgICAgICAgYXdhaXQgY29tbWVudC5zYXZlKClcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24oY29tbWVudClcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGFzeW5jIGRlc3Ryb3koe3JlcXVlc3QsIHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb21tZW50ID0gYXdhaXQgQ29tbWVudC5maW5kT3JGYWlsKHJlcXVlc3QucGFyYW0oJ2lkJykpXHJcbiAgICAgICAgICAgIGF3YWl0IGNvbW1lbnQuZGVsZXRlKClcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4iXX0=