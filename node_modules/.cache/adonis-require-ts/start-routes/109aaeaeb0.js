"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.get('/', async () => {
    return { hello: 'world' };
});
Route_1.default.any('/methods', 'MethodsController.index');
Route_1.default.group(() => {
    Route_1.default.get('/', 'UsersController.index');
    Route_1.default.get('/:id', 'UsersController.getUser');
    Route_1.default.post('/users', 'ValidationsController.createUser');
    Route_1.default.put('/:id', 'UsersController.update');
    Route_1.default.delete('/:id', 'UsersController.destroy');
}).prefix('/users');
Route_1.default.group(() => {
    Route_1.default.get('/', 'PostsController.index');
    Route_1.default.get('/:id', 'PostsController.getPost');
    Route_1.default.post('/', 'PostsController.store');
    Route_1.default.put('/:id', 'PostsController.update');
    Route_1.default.delete('/:id', 'PostsController.destroy');
}).prefix('/posts');
Route_1.default.group(() => {
    Route_1.default.get('/', 'CommentsController.index');
    Route_1.default.get('/:id', 'CommentsController.getComment');
    Route_1.default.post('/', 'CommentsController.store');
    Route_1.default.put('/:id', 'CommentsController.update');
    Route_1.default.delete('/:id', 'CommentsController.destroy');
}).prefix('/comments');
Route_1.default.get('/users/getone/:id', 'UsersController.getOne');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBb0JBLG9GQUEwQztBQUUxQyxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN4QixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBQzNCLENBQUMsQ0FBQyxDQUFBO0FBRUYsZUFBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtBQUVoRCxlQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtJQUNmLGVBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUE7SUFDdkMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtJQUM1QyxlQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFBO0lBQ3hELGVBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHdCQUF3QixDQUFDLENBQUE7SUFDM0MsZUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtBQUNqRCxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7QUFFbkIsZUFBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7SUFDZixlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxDQUFBO0lBQ3ZDLGVBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLHlCQUF5QixDQUFDLENBQUE7SUFDNUMsZUFBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtJQUN4QyxlQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxDQUFBO0lBQzNDLGVBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLHlCQUF5QixDQUFDLENBQUE7QUFDakQsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBRW5CLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0lBQ2YsZUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQTtJQUMxQyxlQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO0lBQ2xELGVBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUE7SUFDM0MsZUFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsMkJBQTJCLENBQUMsQ0FBQTtJQUM5QyxlQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSw0QkFBNEIsQ0FBQyxDQUFBO0FBQ3BELENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUV0QixlQUFLLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLHdCQUF3QixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxufCBSb3V0ZXNcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnxcclxufCBUaGlzIGZpbGUgaXMgZGVkaWNhdGVkIGZvciBkZWZpbmluZyBIVFRQIHJvdXRlcy4gQSBzaW5nbGUgZmlsZSBpcyBlbm91Z2hcclxufCBmb3IgbWFqb3JpdHkgb2YgcHJvamVjdHMsIGhvd2V2ZXIgeW91IGNhbiBkZWZpbmUgcm91dGVzIGluIGRpZmZlcmVudFxyXG58IGZpbGVzIGFuZCBqdXN0IG1ha2Ugc3VyZSB0byBpbXBvcnQgdGhlbSBpbnNpZGUgdGhpcyBmaWxlLiBGb3IgZXhhbXBsZVxyXG58XHJcbnwgRGVmaW5lIHJvdXRlcyBpbiBmb2xsb3dpbmcgdHdvIGZpbGVzXHJcbnwg4pSc4pSA4pSAIHN0YXJ0L3JvdXRlcy9jYXJ0LnRzXHJcbnwg4pSc4pSA4pSAIHN0YXJ0L3JvdXRlcy9jdXN0b21lci50c1xyXG58XHJcbnwgYW5kIHRoZW4gaW1wb3J0IHRoZW0gaW5zaWRlIGBzdGFydC9yb3V0ZXMudHNgIGFzIGZvbGxvd3NcclxufFxyXG58IGltcG9ydCAnLi9yb3V0ZXMvY2FydCdcclxufCBpbXBvcnQgJy4vcm91dGVzL2N1c3RvbWVyJ1xyXG58XHJcbiovXHJcblxyXG5pbXBvcnQgUm91dGUgZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Sb3V0ZSdcclxuXHJcblJvdXRlLmdldCgnLycsIGFzeW5jICgpID0+IHtcclxuICByZXR1cm4geyBoZWxsbzogJ3dvcmxkJyB9XHJcbn0pXHJcblxyXG5Sb3V0ZS5hbnkoJy9tZXRob2RzJywgJ01ldGhvZHNDb250cm9sbGVyLmluZGV4JylcclxuXHJcblJvdXRlLmdyb3VwKCgpID0+IHtcclxuICBSb3V0ZS5nZXQoJy8nLCAnVXNlcnNDb250cm9sbGVyLmluZGV4JylcclxuICBSb3V0ZS5nZXQoJy86aWQnLCAnVXNlcnNDb250cm9sbGVyLmdldFVzZXInKVxyXG4gIFJvdXRlLnBvc3QoJy91c2VycycsICdWYWxpZGF0aW9uc0NvbnRyb2xsZXIuY3JlYXRlVXNlcicpXHJcbiAgUm91dGUucHV0KCcvOmlkJywgJ1VzZXJzQ29udHJvbGxlci51cGRhdGUnKVxyXG4gIFJvdXRlLmRlbGV0ZSgnLzppZCcsICdVc2Vyc0NvbnRyb2xsZXIuZGVzdHJveScpXHJcbn0pLnByZWZpeCgnL3VzZXJzJylcclxuXHJcblJvdXRlLmdyb3VwKCgpID0+IHtcclxuICBSb3V0ZS5nZXQoJy8nLCAnUG9zdHNDb250cm9sbGVyLmluZGV4JylcclxuICBSb3V0ZS5nZXQoJy86aWQnLCAnUG9zdHNDb250cm9sbGVyLmdldFBvc3QnKVxyXG4gIFJvdXRlLnBvc3QoJy8nLCAnUG9zdHNDb250cm9sbGVyLnN0b3JlJylcclxuICBSb3V0ZS5wdXQoJy86aWQnLCAnUG9zdHNDb250cm9sbGVyLnVwZGF0ZScpXHJcbiAgUm91dGUuZGVsZXRlKCcvOmlkJywgJ1Bvc3RzQ29udHJvbGxlci5kZXN0cm95JylcclxufSkucHJlZml4KCcvcG9zdHMnKVxyXG5cclxuUm91dGUuZ3JvdXAoKCkgPT4ge1xyXG4gIFJvdXRlLmdldCgnLycsICdDb21tZW50c0NvbnRyb2xsZXIuaW5kZXgnKVxyXG4gIFJvdXRlLmdldCgnLzppZCcsICdDb21tZW50c0NvbnRyb2xsZXIuZ2V0Q29tbWVudCcpXHJcbiAgUm91dGUucG9zdCgnLycsICdDb21tZW50c0NvbnRyb2xsZXIuc3RvcmUnKVxyXG4gIFJvdXRlLnB1dCgnLzppZCcsICdDb21tZW50c0NvbnRyb2xsZXIudXBkYXRlJylcclxuICBSb3V0ZS5kZWxldGUoJy86aWQnLCAnQ29tbWVudHNDb250cm9sbGVyLmRlc3Ryb3knKVxyXG59KS5wcmVmaXgoJy9jb21tZW50cycpXHJcblxyXG5Sb3V0ZS5nZXQoJy91c2Vycy9nZXRvbmUvOmlkJywgJ1VzZXJzQ29udHJvbGxlci5nZXRPbmUnKSJdfQ==