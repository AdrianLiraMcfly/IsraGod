"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const CreateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateUserValidator"));
class UsersController {
    async index({ response }) {
        const users = await User_1.default.query();
        return response.status(200).json(users);
    }
    async getUser(ctx) {
        const user = await User_1.default.findOrFail(ctx.params.id);
        return user;
    }
    async store({ request, response }) {
        try {
            const payload = await request.validate(CreateUserValidator_1.default);
            const user = await User_1.default.create(payload);
            return response.status(201).json(user);
        }
        catch (error) {
            return response.status(400).json(error.messages);
        }
    }
    async update({ request, response }) {
        const user = await User_1.default.findOrFail(request.param('id'));
        user.merge(request.all());
        await user.save();
        return response.status(200).json(user);
    }
    async destroy({ request, response }) {
        const user = await User_1.default.findOrFail(request.param('id'));
        user.active = false;
        await user.save();
        return response.status(204);
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLG1IQUFvRTtBQUVwRSxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQXNCO1FBQzlDLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDM0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBd0I7UUFDekMsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDakQsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQ3ZELElBQUk7WUFDQSxNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsNkJBQW1CLENBQUMsQ0FBQTtZQUMzRCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDdkMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUN6QztRQUNELE9BQU8sS0FBSyxFQUFFO1lBQ1YsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7U0FDbkQ7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQ3hELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUN6QixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNqQixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBc0I7UUFDekQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtRQUNuQixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNqQixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0IsQ0FBQztDQUNKO0FBbkNELGtDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXHJcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcclxuaW1wb3J0IENyZWF0ZVVzZXJWYWxpZGF0b3IgZnJvbSAnQXBwL1ZhbGlkYXRvcnMvQ3JlYXRlVXNlclZhbGlkYXRvcidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJzQ29udHJvbGxlciB7XHJcbiAgICBwdWJsaWMgYXN5bmMgaW5kZXgoe3Jlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgVXNlci5xdWVyeSgpXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24odXNlcnMpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldFVzZXIoY3R4OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9yRmFpbChjdHgucGFyYW1zLmlkKVxyXG4gICAgICAgIHJldHVybiB1c2VyXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHN0b3JlKHtyZXF1ZXN0LCByZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShDcmVhdGVVc2VyVmFsaWRhdG9yKVxyXG4gICAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUocGF5bG9hZClcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDEpLmpzb24odXNlcilcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAwKS5qc29uKGVycm9yLm1lc3NhZ2VzKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlKHtyZXF1ZXN0LCByZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKHJlcXVlc3QucGFyYW0oJ2lkJykpXHJcbiAgICAgICAgdXNlci5tZXJnZShyZXF1ZXN0LmFsbCgpKVxyXG4gICAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDApLmpzb24odXNlcilcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZGVzdHJveSh7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9yRmFpbChyZXF1ZXN0LnBhcmFtKCdpZCcpKVxyXG4gICAgICAgIHVzZXIuYWN0aXZlID0gZmFsc2VcclxuICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjA0KVxyXG4gICAgfVxyXG59Il19