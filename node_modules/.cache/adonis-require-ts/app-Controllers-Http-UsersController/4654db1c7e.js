"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const CreateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateUserValidator"));
class UsersController {
    async index({ response }) {
        const users = await User_1.default.query();
        return response.status(200).json(users);
    }
    async getUser(ctx) {
        const user = await User_1.default.findOrFail(ctx.params.id);
        return user;
    }
    async store({ request, response }) {
        const payload = await request.validate(CreateUserValidator_1.default);
        const user = await User_1.default.create(payload);
        await user.save();
        return response.status(201).json(user);
    }
    async update({ request, response }) {
        const user = await User_1.default.findOrFail(request.param('id'));
        user.merge(request.all());
        await user.save();
        return response.status(200).json(user);
    }
    async destroy({ request, response }) {
        const user = await User_1.default.findOrFail(request.param('id'));
        user.active = false;
        await user.save();
        return response.status(204);
    }
    async getOne({ request, response }) {
        const user = await User_1.default.findOrFail(request.param('id'));
        return response.status(200).json(user);
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLG1IQUFvRTtBQUVwRSxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQXNCO1FBQzlDLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDM0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBd0I7UUFDekMsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDakQsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQ3ZELE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyw2QkFBbUIsQ0FBQyxDQUFBO1FBQzNELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN2QyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNqQixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBc0I7UUFDeEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ3pCLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2pCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUMsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFzQjtRQUN6RCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO1FBQ25CLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ2pCLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQ3hELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkQsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMxQyxDQUFDO0NBQ0o7QUFwQ0Qsa0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcclxuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xyXG5pbXBvcnQgQ3JlYXRlVXNlclZhbGlkYXRvciBmcm9tICdBcHAvVmFsaWRhdG9ycy9DcmVhdGVVc2VyVmFsaWRhdG9yJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlcnNDb250cm9sbGVyIHtcclxuICAgIHB1YmxpYyBhc3luYyBpbmRleCh7cmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCBVc2VyLnF1ZXJ5KClcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih1c2VycylcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZ2V0VXNlcihjdHg6IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKGN0eC5wYXJhbXMuaWQpXHJcbiAgICAgICAgcmV0dXJuIHVzZXJcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgc3RvcmUoe3JlcXVlc3QsIHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKENyZWF0ZVVzZXJWYWxpZGF0b3IpXHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHBheWxvYWQpXHJcbiAgICAgICAgYXdhaXQgdXNlci5zYXZlKClcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMSkuanNvbih1c2VyKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGUoe3JlcXVlc3QsIHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPckZhaWwocmVxdWVzdC5wYXJhbSgnaWQnKSlcclxuICAgICAgICB1c2VyLm1lcmdlKHJlcXVlc3QuYWxsKCkpXHJcbiAgICAgICAgYXdhaXQgdXNlci5zYXZlKClcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDIwMCkuanNvbih1c2VyKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBkZXN0cm95KHtyZXF1ZXN0LCByZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKHJlcXVlc3QucGFyYW0oJ2lkJykpXHJcbiAgICAgICAgdXNlci5hY3RpdmUgPSBmYWxzZVxyXG4gICAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cygyMDQpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldE9uZSh7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9yRmFpbChyZXF1ZXN0LnBhcmFtKCdpZCcpKVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHVzZXIpXHJcbiAgICB9XHJcbn0iXX0=