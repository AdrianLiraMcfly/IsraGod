"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
runner_1.test.group('Users', () => {
    (0, runner_1.test)('UsersPost', async ({ client }) => {
        const response = await client.post('/users').form({
            username: 'Testeo12',
            email: 'test12@gmail.com',
            password: '123456',
            confirmation_password: '123456',
            active: true
        });
        response.assertStatus(201);
        response.assertBodyContains({ data: {
                username: 'Testeo12',
                email: 'test12@gmail.com',
                password: '123456',
                confirmation_password: '123456',
                active: 'true'
            } });
    });
    (0, runner_1.test)('UsersGet', async ({ assert, client }) => {
        const response = await client.get('/users');
        response.assertStatus(200);
        assert.isArray(response.body);
    });
    (0, runner_1.test)('UsersGetOne', async ({ assert, client }) => {
        const response = await client.get('/users/1');
        response.assertStatus(200);
        assert.isNotArray(response.body);
    });
    (0, runner_1.test)('UsersPut', async ({ client }) => {
        const response = await client.put('/users/1').form({
            username: 'Testeo2',
            email: 'testeo2@gmail.com',
            password: '123456',
        });
        response.assertStatus(200);
        response.assertBodyContains('Usuario actualizado');
    });
    (0, runner_1.test)('UsersDelete', async ({ client, assert }) => {
        const response = await client.delete('/users/1');
        response.assertStatus(204);
        assert.isEmpty(response.body);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseUNBQW1DO0FBRW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUN2QixJQUFBLGFBQUksRUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNyQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hELFFBQVEsRUFBRSxVQUFVO1lBQ3BCLEtBQUssRUFBRSxrQkFBa0I7WUFDekIsUUFBUSxFQUFFLFFBQVE7WUFDbEIscUJBQXFCLEVBQUUsUUFBUTtZQUMvQixNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQTtRQUNGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsSUFBSSxFQUFDO2dCQUNoQyxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsS0FBSyxFQUFFLGtCQUFrQjtnQkFDekIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLHFCQUFxQixFQUFFLFFBQVE7Z0JBQy9CLE1BQU0sRUFBRSxNQUFNO2FBQ2pCLEVBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzNDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2pELFFBQVEsRUFBRSxTQUFTO1lBQ25CLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFFBQVE7U0FDbkIsQ0FBQyxDQUFBO1FBQ0YsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixRQUFRLENBQUMsa0JBQWtCLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUMvQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDaEQsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDLENBQUMsQ0FBQTtBQUNGLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnQGphcGEvcHJlc2V0LWFkb25pcydcbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ1VzZXJzJywgKCkgPT4ge1xuICB0ZXN0KCdVc2Vyc1Bvc3QnLCBhc3luYyAoeyBjbGllbnQgfSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3QoJy91c2VycycpLmZvcm0oe1xuICAgICAgdXNlcm5hbWU6ICdUZXN0ZW8xMicsXG4gICAgICBlbWFpbDogJ3Rlc3QxMkBnbWFpbC5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICcxMjM0NTYnLFxuICAgICAgY29uZmlybWF0aW9uX3Bhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgIH0pXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMSlcbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe2RhdGE6e1xuICAgICAgdXNlcm5hbWU6ICdUZXN0ZW8xMicsXG4gICAgICBlbWFpbDogJ3Rlc3QxMkBnbWFpbC5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICcxMjM0NTYnLFxuICAgICAgY29uZmlybWF0aW9uX3Bhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgIGFjdGl2ZTogJ3RydWUnXG4gIH19KVxufSlcblxudGVzdCgnVXNlcnNHZXQnLCBhc3luYyAoeyBhc3NlcnQsY2xpZW50IH0pID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KCcvdXNlcnMnKVxuICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICBhc3NlcnQuaXNBcnJheShyZXNwb25zZS5ib2R5KVxufSlcblxudGVzdCgnVXNlcnNHZXRPbmUnLCBhc3luYyAoeyBhc3NlcnQsY2xpZW50IH0pID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KCcvdXNlcnMvMScpXG4gIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDApXG4gIGFzc2VydC5pc05vdEFycmF5KHJlc3BvbnNlLmJvZHkpXG59KVxuXG50ZXN0KCdVc2Vyc1B1dCcsIGFzeW5jICh7IGNsaWVudCB9KSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnB1dCgnL3VzZXJzLzEnKS5mb3JtKHtcbiAgICB1c2VybmFtZTogJ1Rlc3RlbzInLFxuICAgIGVtYWlsOiAndGVzdGVvMkBnbWFpbC5jb20nLFxuICAgIHBhc3N3b3JkOiAnMTIzNDU2JyxcbiAgfSlcbiAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcbiAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKCdVc3VhcmlvIGFjdHVhbGl6YWRvJylcbn0pXG5cbnRlc3QoJ1VzZXJzRGVsZXRlJywgYXN5bmMgKHsgY2xpZW50LCBhc3NlcnQgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5kZWxldGUoJy91c2Vycy8xJylcbiAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwNClcbiAgYXNzZXJ0LmlzRW1wdHkocmVzcG9uc2UuYm9keSlcbn0pXG59KVxuIl19