"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
runner_1.test.group('Users', () => {
    (0, runner_1.test)('UsersPost', async ({ client }) => {
        const response = await client.post('/users').form({
            username: 'Testeo123',
            email: 'test123@gmail.com',
            password: '123456',
            confirmation_password: '123456',
            active: true
        });
        response.assertStatus(201);
        response.assertBodyContains({ data: {
                username: 'Testeo123',
                email: 'test123@gmail.com',
                password: '123456',
                confirmation_password: '123456',
                active: 'true'
            } });
    });
    (0, runner_1.test)('UsersGet', async ({ assert, client }) => {
        const response = await client.get('/users');
        response.assertStatus(200);
        assert.isArray(response.body);
    });
    (0, runner_1.test)('UsersGetOne', async ({ assert, client }) => {
        const response = await client.get('/users/1');
        response.assertStatus(200);
        assert.isNotArray(response.body);
    });
    (0, runner_1.test)('UsersPut', async ({ client }) => {
        const response = await client.put('/users/1').form({
            username: 'Testeo2',
            email: 'testeo2@gmail.com',
            password: '123456',
        });
        response.assertStatus(200);
        response.assertBodyContains('Usuario actualizado');
    });
    (0, runner_1.test)('UsersDelete', async ({ client, assert }) => {
        const response = await client.delete('/users/1');
        response.assertStatus(204);
        assert.isEmpty(response.body);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseUNBQW1DO0FBRW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUN2QixJQUFBLGFBQUksRUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNyQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hELFFBQVEsRUFBRSxXQUFXO1lBQ3JCLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFFBQVE7WUFDbEIscUJBQXFCLEVBQUUsUUFBUTtZQUMvQixNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQTtRQUNGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsSUFBSSxFQUFDO2dCQUNoQyxRQUFRLEVBQUUsV0FBVztnQkFDckIsS0FBSyxFQUFFLG1CQUFtQjtnQkFDMUIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLHFCQUFxQixFQUFFLFFBQVE7Z0JBQy9CLE1BQU0sRUFBRSxNQUFNO2FBQ2pCLEVBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzNDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDL0IsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzdDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2pELFFBQVEsRUFBRSxTQUFTO1lBQ25CLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsUUFBUSxFQUFFLFFBQVE7U0FDbkIsQ0FBQyxDQUFBO1FBQ0YsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixRQUFRLENBQUMsa0JBQWtCLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUMvQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDaEQsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDLENBQUMsQ0FBQTtBQUNGLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnQGphcGEvcHJlc2V0LWFkb25pcydcbmltcG9ydCB7IHRlc3QgfSBmcm9tICdAamFwYS9ydW5uZXInXG5cbnRlc3QuZ3JvdXAoJ1VzZXJzJywgKCkgPT4ge1xuICB0ZXN0KCdVc2Vyc1Bvc3QnLCBhc3luYyAoeyBjbGllbnQgfSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3QoJy91c2VycycpLmZvcm0oe1xuICAgICAgdXNlcm5hbWU6ICdUZXN0ZW8xMjMnLFxuICAgICAgZW1haWw6ICd0ZXN0MTIzQGdtYWlsLmNvbScsXG4gICAgICBwYXNzd29yZDogJzEyMzQ1NicsXG4gICAgICBjb25maXJtYXRpb25fcGFzc3dvcmQ6ICcxMjM0NTYnLFxuICAgICAgYWN0aXZlOiB0cnVlXG4gICAgfSlcbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAxKVxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7ZGF0YTp7XG4gICAgICB1c2VybmFtZTogJ1Rlc3RlbzEyMycsXG4gICAgICBlbWFpbDogJ3Rlc3QxMjNAZ21haWwuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgIGNvbmZpcm1hdGlvbl9wYXNzd29yZDogJzEyMzQ1NicsXG4gICAgICBhY3RpdmU6ICd0cnVlJ1xuICB9fSlcbn0pXG5cbnRlc3QoJ1VzZXJzR2V0JywgYXN5bmMgKHsgYXNzZXJ0LGNsaWVudCB9KSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldCgnL3VzZXJzJylcbiAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcbiAgYXNzZXJ0LmlzQXJyYXkocmVzcG9uc2UuYm9keSlcbn0pXG5cbnRlc3QoJ1VzZXJzR2V0T25lJywgYXN5bmMgKHsgYXNzZXJ0LGNsaWVudCB9KSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldCgnL3VzZXJzLzEnKVxuICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICBhc3NlcnQuaXNOb3RBcnJheShyZXNwb25zZS5ib2R5KVxufSlcblxudGVzdCgnVXNlcnNQdXQnLCBhc3luYyAoeyBjbGllbnQgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wdXQoJy91c2Vycy8xJykuZm9ybSh7XG4gICAgdXNlcm5hbWU6ICdUZXN0ZW8yJyxcbiAgICBlbWFpbDogJ3Rlc3RlbzJAZ21haWwuY29tJyxcbiAgICBwYXNzd29yZDogJzEyMzQ1NicsXG4gIH0pXG4gIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDApXG4gIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucygnVXN1YXJpbyBhY3R1YWxpemFkbycpXG59KVxuXG50ZXN0KCdVc2Vyc0RlbGV0ZScsIGFzeW5jICh7IGNsaWVudCwgYXNzZXJ0IH0pID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZGVsZXRlKCcvdXNlcnMvMScpXG4gIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDQpXG4gIGFzc2VydC5pc0VtcHR5KHJlc3BvbnNlLmJvZHkpXG59KVxufSlcbiJdfQ==