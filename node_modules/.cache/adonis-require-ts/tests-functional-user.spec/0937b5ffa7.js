"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
runner_1.test.group('Users', () => {
    (0, runner_1.test)('UsersPost', async ({ client }) => {
        const response = await client.post('/users').form({
            username: 'Testeo1234',
            email: 'test1234@gmail.com',
            password: '123456',
            confirmation_password: '123456',
            active: true
        });
        response.assertStatus(201);
        response.assertBodyContains({ data: {
                username: 'Testeo1234',
                email: 'test1234@gmail.com',
                password: '123456',
                confirmation_password: '123456',
                active: true
            } });
    });
    (0, runner_1.test)('UsersGet', async ({ assert, client }) => {
        const response = await client.get('/users');
        response.assertStatus(200);
        assert.isArray(response.body);
    });
    (0, runner_1.test)('UsersGetOne', async ({ assert, client }) => {
        const response = await client.get('/users/1');
        response.assertStatus(200);
        assert.isNotArray(response.body);
    });
    (0, runner_1.test)('UsersPut', async ({ client }) => {
        const response = await client.put('/users/1').form({
            username: 'Testeo2',
            email: 'testeo2@gmail.com',
            password: '123456',
        });
        response.assertStatus(200);
        response.assertBodyContains('Usuario actualizado');
    });
    (0, runner_1.test)('UsersDelete', async ({ client, assert }) => {
        const response = await client.delete('/users/1');
        response.assertStatus(204);
        assert.isEmpty(response.body);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseUNBQW1DO0FBRW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUN2QixJQUFBLGFBQUksRUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUNyQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hELFFBQVEsRUFBRSxZQUFZO1lBQ3RCLEtBQUssRUFBRSxvQkFBb0I7WUFDM0IsUUFBUSxFQUFFLFFBQVE7WUFDbEIscUJBQXFCLEVBQUUsUUFBUTtZQUMvQixNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQTtRQUNGLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsSUFBSSxFQUFDO2dCQUNoQyxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsS0FBSyxFQUFFLG9CQUFvQjtnQkFDM0IsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLHFCQUFxQixFQUFFLFFBQVE7Z0JBQy9CLE1BQU0sRUFBRSxJQUFJO2FBQ2YsRUFBQyxDQUFDLENBQUE7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUMzQyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDM0MsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMvQixDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUM5QyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDN0MsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDakQsUUFBUSxFQUFFLFNBQVM7WUFDbkIsS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDLENBQUE7UUFDRixRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0lBQ3BELENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQy9DLE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNoRCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzFCLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQy9CLENBQUMsQ0FBQyxDQUFBO0FBQ0YsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdAamFwYS9wcmVzZXQtYWRvbmlzJ1xuaW1wb3J0IHsgdGVzdCB9IGZyb20gJ0BqYXBhL3J1bm5lcidcblxudGVzdC5ncm91cCgnVXNlcnMnLCAoKSA9PiB7XG4gIHRlc3QoJ1VzZXJzUG9zdCcsIGFzeW5jICh7IGNsaWVudCB9KSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdCgnL3VzZXJzJykuZm9ybSh7XG4gICAgICB1c2VybmFtZTogJ1Rlc3RlbzEyMzQnLFxuICAgICAgZW1haWw6ICd0ZXN0MTIzNEBnbWFpbC5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICcxMjM0NTYnLFxuICAgICAgY29uZmlybWF0aW9uX3Bhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgIH0pXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMSlcbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoe2RhdGE6e1xuICAgICAgdXNlcm5hbWU6ICdUZXN0ZW8xMjM0JyxcbiAgICAgIGVtYWlsOiAndGVzdDEyMzRAZ21haWwuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgIGNvbmZpcm1hdGlvbl9wYXNzd29yZDogJzEyMzQ1NicsXG4gICAgICBhY3RpdmU6IHRydWVcbiAgfX0pXG59KVxuXG50ZXN0KCdVc2Vyc0dldCcsIGFzeW5jICh7IGFzc2VydCxjbGllbnQgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoJy91c2VycycpXG4gIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDApXG4gIGFzc2VydC5pc0FycmF5KHJlc3BvbnNlLmJvZHkpXG59KVxuXG50ZXN0KCdVc2Vyc0dldE9uZScsIGFzeW5jICh7IGFzc2VydCxjbGllbnQgfSkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoJy91c2Vycy8xJylcbiAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMClcbiAgYXNzZXJ0LmlzTm90QXJyYXkocmVzcG9uc2UuYm9keSlcbn0pXG5cbnRlc3QoJ1VzZXJzUHV0JywgYXN5bmMgKHsgY2xpZW50IH0pID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucHV0KCcvdXNlcnMvMScpLmZvcm0oe1xuICAgIHVzZXJuYW1lOiAnVGVzdGVvMicsXG4gICAgZW1haWw6ICd0ZXN0ZW8yQGdtYWlsLmNvbScsXG4gICAgcGFzc3dvcmQ6ICcxMjM0NTYnLFxuICB9KVxuICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoJ1VzdWFyaW8gYWN0dWFsaXphZG8nKVxufSlcblxudGVzdCgnVXNlcnNEZWxldGUnLCBhc3luYyAoeyBjbGllbnQsIGFzc2VydCB9KSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmRlbGV0ZSgnL3VzZXJzLzEnKVxuICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjA0KVxuICBhc3NlcnQuaXNFbXB0eShyZXNwb25zZS5ib2R5KVxufSlcbn0pXG4iXX0=